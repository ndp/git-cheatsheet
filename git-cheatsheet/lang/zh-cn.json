{
  "commands": {
    "status": {
      "cmd": "status",
      "docs": "显示以下文件的状态变化和路径：\r• 暂存区与当前的 `HEAD` 指针提交之间的差异（即将提交），\r• 工作区与暂存区之间的差异（下次不会提交），\r• 没有被 git 追踪。"
    },
    "diff": {
      "cmd": "diff",
      "docs": "显示工作区与暂存区之间的差异。"
    },
    "diff x": {
      "cmd": "diff <commit or branch>",
      "docs": "查看工作区与某一提交之间的不同。你也可以使用 `HEAD` 指针来对比最新提交，或是使用分支名来和分支进行比较。"
    },
    "add x": {
      "cmd": "add <file... or dir...>",
      "docs": "添加当前的新内容或是修改的文件到暂存区，作为下次提交的部分内容。使用 `add --interactive` 进行交互式操作将工作区中修改的内容添加到暂存区中。"
    },
    "add -u": {
      "cmd": "add -u",
      "docs": "添加当前修改(`不包括新文件`)到暂存区, 这与 'git commit -a' 准备提交内容的方式一致。"
    },
    "rm x": {
      "cmd": "rm <file(s)...>",
      "docs": "从工作区和暂存区删除某个文件。"
    },
    "mv x": {
      "cmd": "mv <file(s)...>",
      "docs": "从工作区和暂存区移动文件。"
    },
    "commit -a": {
      "cmd": "commit -a [-m 'msg']",
      "docs": "提交上次提交之后的所有修改，但未被追踪的文件除外（即所有已在暂存区中列出的文件），同时删除暂存区中已从工作区中删除的文件。"
    },
    "checkout x": {
      "cmd": "checkout <file(s)... or dir>",
      "docs": "更新工作区文件或文件夹，`不会`切换分支。"
    },
    "reset head x": {
      "cmd": "reset HEAD <file(s)...>",
      "docs": "从下次提交中移除指定文件。重置暂存区记录但是不处理工作区(即文件修改被保留但不会被提交)，同时报告没有被更新的文件。"
    },
    "reset --soft head^": {
      "cmd": "reset --soft HEAD^",
      "docs": "撤销上一次提交，以未提交的状态保留工作区的修改。完全不会修改暂存区文件或工作区，唯一的更改是移动本地仓库的指针。"
    },
    "reset --hard": {
      "cmd": "reset --hard",
      "docs": "恢复工作区和暂存区到上次提交的状态。警告：所有工作区修改都会丢失。如果你想从头开始的话，使用这条命令来解决合并错误。传入 `ORIG_HEAD` 来撤销该次提交以来的所有修改。"
    },
    "switch": {
      "cmd": "switch <branch>",
      "docs": "切换分支，更改工作区和暂存区为 <branch> 分支的内容，之后 `HEAD` 指向 <branch> 分支。"
    },
    "checkout -b x": {
      "cmd": "checkout -b <name of new branch>",
      "docs": "新建一个分支并且立即切换过去。"
    },
    "merge x": {
      "cmd": "merge <commit or branch>",
      "docs": "从 <branch name> 分支合并到当前分支。\r使用 `&#8209;&#8209;no-commit` 可以保持在(已经合并)但未提交状态。\r使用 `--no-ff` 创建一个合并提交，即使合并被解析为快进。"
    },
    "rebase x": {
      "cmd": "rebase <upstream branch>",
      "docs": "回滚当前分支与 `<upstream>` 分支分开处的所有提交记录，将这些提交一一应用到 `<upstream>` 分支的 `HEAD` 作为新的提交记录。"
    },
    "cherry-pick x": {
      "cmd": "cherry-pick <commit>",
      "docs": "整合选定提交的修改到当前分支。"
    },
    "revert x": {
      "cmd": "revert <commit>",
      "docs": "回滚 <commit> 指定的提交并提交结果。这需要当前工作区是干净的，即相比于 `HEAD` 提交没有修改。"
    },
    "diff --cached": {
      "cmd": "diff --cached [<commit>]",
      "docs": "查看已经暂存的内容和上次提交的区别。可通过 <commit> 指定某一提交。"
    },
    "commit": {
      "cmd": "commit [-m 'msg']",
      "docs": "暂存区中的当前内容连同提交信息储存为新提交。"
    },
    "commit --amend": {
      "cmd": "commit --amend",
      "docs": "用当前暂存区的内容修改上一次的提交，也可以拿来修改提交信息。"
    },
    "log": {
      "cmd": "log",
      "docs": "显示最近的提交，新的在上边。参数：\r`&#8209;&#8209;decorate` 显示分支和tag名字到对应的提交\r`&#8209;&#8209;stat` 显示状态 (文件修改, 添加, 删除) \r`&#8209;&#8209;author=<author>`  只显示某个作者\r`&#8209;&#8209;after=\"MMM DD YYYY\"` 如(\"Jun 20 2008\") 只显示某个日期之后的提交\r`&#8209;&#8209;before=\"MMM DD YYYY\"` 只显示某个日期之前的提交\r`&#8209;&#8209;merge` 只与当前合并冲突有关的提交"
    },
    "diff x x": {
      "cmd": "diff <commit> <commit>",
      "docs": "显示两个提交之间的不同。"
    },
    "branch": {
      "cmd": "branch",
      "docs": "显示所有（本地）存在的分支。参数 `-r` 显示远程追踪分支，参数 `-a` 显示全部。"
    },
    "branch -d x": {
      "cmd": "branch -d <branch>",
      "docs": "删除某个分支，使用 `—D` 来强制删除。"
    },
    "branch --track x x": {
      "cmd": "branch --track <new> <remote/branch>",
      "docs": "新建一个本地分支来跟踪一个远程分支。"
    },
    "clone x": {
      "cmd": "clone <repo>",
      "docs": "下载 `<repo>` 指定的仓库，并在工作区检出主分支的 `HEAD` 记录。"
    },
    "pull x x": {
      "cmd": "pull <remote> <refspec>",
      "docs": "从远程仓库取得修改到当前分支. 一般来说, `git pull` 相当于 `git fetch` 然后再 `git merge FETCH_HEAD` 。"
    },
    "reset --hard x/x": {
      "cmd": "reset --hard <remote>/<branch>",
      "docs": "重置本地仓库和工作区，让它与远程仓库一致。用 `reset &#8209;&#8209;hard origin/main` 来丢弃所有的本地修改，通常会使用这个命令来处理失败的合并，记录会直接从远程仓库开始。"
    },
    "fetch x x": {
      "cmd": "fetch <remote> <refspec>",
      "docs": "从远程仓库下载对象和引用(即版本信息)。"
    },
    "push": {
      "cmd": "push",
      "docs": "从本地提交推送分支改变到远程，分支为所有推送过的分支。"
    },
    "push x x": {
      "cmd": "push <remote> <branch>",
      "docs": "向远程仓库推送新(或已存在的)的分支。"
    },
    "push x x:x": {
      "cmd": "push <remote> <local>:<name>",
      "docs": "以另外一个名字推送分支到远程仓库。<local> 是本地分支名称，<name> 是远程仓库中的分支名称。"
    },
    "branch -r": {
      "cmd": "branch -r",
      "docs": "列出远程分支。"
    },
    "push --delete": {
      "cmd": "push <remote> --delete <branch>",
      "docs": "删除一个远程分支。"
    },
    "clean": {
      "cmd": "clean",
      "docs": "从当前文件夹开始递归清理不受版本管理的内容。使用 `-n` 显示将被删除的文件。使用 `-f` 删除文件。"
    },
    "stash push": {
      "cmd": "stash push [<msg>]",
      "docs": "保存当前修改到新的贮藏区，并且执行 `git reset --hard` 回滚. <msg> 是可选项，用来描述贮藏状态。想快速创建一个快照，省略掉 `push` 和 <msg>。"
    },
    "stash apply": {
      "cmd": "stash apply [<stash>]",
      "docs": "从指定贮藏中将修改应用到工作区，默认是最新的贮藏。"
    },
    "stash pop": {
      "cmd": "stash pop",
      "docs": "应用最新（或指定的）贮藏中的修改，然后删除贮藏。"
    },
    "stash list": {
      "cmd": "stash list",
      "docs": "显示当前你有的所有贮藏。"
    },
    "stash show": {
      "cmd": "stash show [<stash>]",
      "docs": "显示贮藏中记录的修改，对比贮藏生成时的原来状态。不指定 <stash> 则显示最新的贮藏。"
    },
    "stash drop": {
      "cmd": "stash drop [<stash>]",
      "docs": "从贮藏区中删除单个贮藏；不指定 <stash> 则删除最新的贮藏。"
    },
    "stash clear": {
      "cmd": "stash clear",
      "docs": "清空贮藏区。注意相关存档会被清理，此操作`不能被恢复`。"
    },
    "stash branch x": {
      "cmd": "stash branch <branchname> [<stash>]",
      "docs": "新建并检出一个新分支 <branchname>, 分支开始于最初创建 <stash> 的提交，应用贮藏的修改作为新的工作区和索引。\r如果命令执行成功，并且 <stash> 是以 stash@{<revision>} 方式给出的，则删除这个 <stash>。未给出则使用最新的贮藏。\r如果运行 `git stash push` 的分支已更改到足以导致 `git stash apply` 因冲突而失败，那么这将非常有用。由于贮藏是在运行 `git stash` 时在 `HEAD` 的提交之上应用的，因此它可以恢复最初贮藏的状态，而不会发生冲突。"
    }
  },
  "locations": {
    "stash": "贮藏区",
    "workspace": "工作区",
    "index": "暂存区",
    "local_repo": "本地仓库",
    "remote_repo": "上游仓库",
    "docs": {
      "stash": "当你去修改别的东西的时候，隐藏（临时保存）当前的修改的地方",
      "workspace": "你本地检出的代码。也被叫做 `工作拷贝`、`工作树` 或 `检出`。它是你文件系统上的任何一个目录，它有一个与之相关的仓库（通常通过其中存在一个名为 `.git` 的子目录来表示）。工作区包括该目录中的所有文件和子目录。",
      "index": "用于提交文件修改的暂存区域。在你“提交”（或记录）文件前，你首先需要将它们添加到索引中。也叫做 “当前目录缓存”、“暂存区”、“缓存”或“暂存文件”。",
      "local_repo": "`.git` 文件夹保存仓库需要的全部信息——即 Git 仓库的骨架，典型的分支： `main`, `master`, `feature-x`, `bugfix-y`。本地仓库具有与任何其他 Git 仓库完全相同的特性和功能。",
      "remote_repo": "与其他开发人员共享和协作的代码仓库。托管于某些网络或远端，例如 Github。默认名称是 \"origin\"。典型的分支：`main`、`master`、`shared-feature-x`、`release-y`。也被叫做“远程仓库”或“远端”。"
    }
  }
}
