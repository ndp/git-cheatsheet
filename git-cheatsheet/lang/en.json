{
  "dir": "ltr",
  "commands": {
    "status": {
      "cmd": "status",
      "docs": "Displays: \r• paths that have differences between the index file and the current `HEAD` commit, \r• paths that have differences between the workspace and the index file, and \r• paths in the workspace that are not tracked by git."
    },
    "diff": {
      "cmd": "diff",
      "docs": "Displays the differences not added to the index."
    },
    "diff x": {
      "cmd": "diff <commit or branch>",
      "docs": "View the changes you have in your workspace relative to the named <commit>. You can use `HEAD` to compare it with the latest commit, or a branch name to compare with the tip of a different branch"
    },
    "add x": {
      "cmd": "add <file... or dir...>",
      "docs": "Adds the current content of new or modified files to the index, thus staging that content for inclusion in the next commit. Use `add --interactive` to add the modified contents in the workspace interactively to the index."
    },
    "add -u": {
      "cmd": "add -u",
      "docs": "Adds the current content of modified (NOT NEW) files to the index.  This is similar to what `git commit -a` does in preparation for making a commit."
    },
    "rm x": {
      "cmd": "rm <file(s)...>",
      "docs": "Remove a file from the workspace and the index."
    },
    "mv x": {
      "cmd": "mv <file(s)...>",
      "docs": "Move file in the workspace and the index."
    },
    "commit -a": {
      "cmd": "commit -a [-m 'msg']",
      "docs": "Commit all files changed since your last commit, except untracked files (i.e. all files that are already listed in the index). Remove files in the index that have been removed from the workspace."
    },
    "checkout x": {
      "cmd": "checkout <files(s)... or dir>",
      "docs": "Updates the file or directory in the workspace. Does NOT switch branches."
    },
    "reset head x": {
      "cmd": "reset HEAD <file(s)...>",
      "docs": "Remove the specified files from the next commit. Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated."
    },
    "reset --soft head^": {
      "cmd": "reset --soft HEAD^",
      "docs": "Undo the last commit, leaving its changes in the workspace, uncommitted."
    },
    "reset --hard": {
      "cmd": "reset --hard",
      "docs": "Matches the workspace and index to the local tree. WARNING: Any changes to tracked files in the working tree since commit are lost. Use this if merging has resulted in conflicts and you'd like to start over. Pass `ORIG_HEAD` to undo the most recent successful merge and any changes after."
    },
    "switch": {
      "cmd": "switch <branch>",
      "docs": "Switches branches by updating the index and workspace to reflect the specified branch, <branch>, and updating `HEAD` to be <branch>."
    },
    "checkout -b x": {
      "cmd": "checkout -b <name of new branch>",
      "docs": "Create a branch and switch to it"
    },
    "merge x": {
      "cmd": "merge <commit or branch>",
      "docs": "Merge changes from <branch name> into current branch.\rUse `&#8209;&#8209;no-commit` to leave changes uncommitted. Use `--no-ff` to create a merge commit even if the merge resolves as a fast forward."
    },
    "rebase x": {
      "cmd": "rebase <upstream branch>",
      "docs": "Reverts all commits since the current branch diverged from <upstream branch>, and then re-applies them one-by-one on top of changes from the `HEAD` of <upstream branch>."
    },
    "cherry-pick x": {
      "cmd": "cherry-pick <commit>",
      "docs": "Integrate changes in the given commit into the current branch."
    },
    "revert x": {
      "cmd": "revert <commit>",
      "docs": "Reverse commit specified by <commit> and commit the result. This requires your working tree to be clean (no modifications from the `HEAD` commit)."
    },
    "diff --cached": {
      "cmd": "diff --cached [<commit>]",
      "docs": "View the changes you staged vs the latest commit. Can pass a <commit> to see changes relative to it."
    },
    "commit": {
      "cmd": "commit [-m 'msg']",
      "docs": "Stores the current contents of the index in a new commit along with a log message from the user describing the changes."
    },
    "commit --amend": {
      "cmd": "commit --amend",
      "docs": "Modify the last commit with the current index changes."
    },
    "log": {
      "cmd": "log",
      "docs": "Show recent commits, most recent on top. Options:\r`&#8209;&#8209;decorate` with branch and tag names on appropriate commits\r`&#8209;&#8209;stat` with stats (files changed, insertions, and deletions) \r`&#8209;&#8209;author=<author>`  only by a certain author\r`&#8209;&#8209;after=\"MMM DD YYYY\"` ex. (`Jun 20 2008`) only commits after a certain date\r`&#8209;&#8209;before=\"MMM DD YYYY\"` only commits that occur before a certain date \r`&#8209;&#8209;merge` only the commits involved in the current merge conflicts"
    },
    "diff x x": {
      "cmd": "diff <commit> <commit>",
      "docs": "View the changes between two arbitrary commits"
    },
    "branch": {
      "cmd": "branch",
      "docs": "List all existing branches. Option `-r` causes the remote-tracking branches to be listed, and option `-a` shows both."
    },
    "branch -d x": {
      "cmd": "branch -d <branch>",
      "docs": "Delete an specified branch. Use `-D` to force."
    },
    "branch --track x x": {
      "cmd": "branch --track <new branch name> <remote>/<branch>",
      "docs": "Create a new local branch from a remote-tracking branch."
    },
    "clone x": {
      "cmd": "clone <repo>",
      "docs": "Download the repository specified by <repo> and checkout `HEAD` of the main branch."
    },
    "pull x x": {
      "cmd": "pull <remote> <refspec>",
      "docs": "Incorporates changes from a remote repository into the current branch. In its default mode, `git pull` is shorthand for `git fetch` followed by `git merge FETCH_HEAD`."
    },
    "reset --hard x/x": {
      "cmd": "reset --hard <remote>/<branch>",
      "docs": "Reset local repo and working tree to match a remote-tracking branch. Use `reset &#8209;&#8209;hard origin/main` to throw away all commits to the local main branch. Use this to start over on a failed merge."
    },
    "fetch x x": {
      "cmd": "fetch <remote> <refspec>",
      "docs": "Download objects and refs from another repository."
    },
    "push": {
      "cmd": "push",
      "docs": "Update the server with your commits across all branches that are *COMMON* between your local copy and the server. Local branches that were never pushed to the server in the first place are not shared."
    },
    "push x x": {
      "cmd": "push <remote> <branch>",
      "docs": "Push new (or existing) branch to remote repository"
    },
    "push x x:x": {
      "cmd": "push <remote> <local>:<name>",
      "docs": "Push a branch to remote repository with a different name. <local> is the local branch name, and <name> is the branch name in the remote repository."
    },
    "branch -r": {
      "cmd": "branch -r",
      "docs": "List remote branches"
    },
    "push --delete": {
      "cmd": "push <remote> --delete <branch>",
      "docs": "Remove a remote branch."
    },
    "clean": {
      "cmd": "clean",
      "docs": "Cleans the working tree by recursively removing files that are not under version control, starting from the current directory. Use `-n` for a \"dry run\" to see what would be deleted. Use `-f` to delete the files."
    },
    "stash push": {
      "cmd": "stash push [<msg>]",
      "docs": "Save your local modifications to a new stash, and run `git reset &#8209;&#8209;hard` to revert them. The <msg> part is optional and gives the description along with the stashed state. For quickly making a snapshot, you can omit both `push` and <msg>."
    },
    "stash apply": {
      "cmd": "stash apply [<stash>]",
      "docs": "Move changes from the specified stash into the workspace. The latest stash is the default."
    },
    "stash pop": {
      "cmd": "stash pop",
      "docs": "Applies the changes from the last (or specified) stash and then removes the given stash."
    },
    "stash list": {
      "cmd": "stash list",
      "docs": "List the stashes that you currently have."
    },
    "stash show": {
      "cmd": "stash show [<stash>]",
      "docs": "Show the changes recorded in the stash as a diff between the stashed state and its original parent. When no <stash> is given, shows the latest one."
    },
    "stash drop": {
      "cmd": "stash drop [<stash>]",
      "docs": "Remove a single stashed state from the stash list. When no <stash> is given, it removes the latest one."
    },
    "stash clear": {
      "cmd": "stash clear",
      "docs": "Remove all the stashed states. Note that those states will then be subject to pruning, and may be impossible to recover."
    },
    "stash branch x": {
      "cmd": "stash branch <branchname> [<stash>]",
      "docs": "Creates and checks out a new branch named <branchname> starting from the commit at which the <stash> was originally created, applies the changes recorded in <stash> to the new working tree and index. \rIf that succeeds, and <stash> is a reference of the form stash@{<revision>}, it then drops the <stash>. When no <stash> is given, applies the latest one. \rThis is useful if the branch on which you ran `git stash push` has changed enough that `git stash apply` fails due to conflicts. Since the stash is applied on top of the commit that was `HEAD` at the time `git stash` was run, it restores the originally stashed state with no conflicts."
    }
  },
  "locations": {
    "stash": "stash",
    "workspace": "workspace",
    "index": "index",
    "local_repo": "local repository",
    "remote_repo": "upstream repository",
    "docs": {
      "stash": "A place to hide modifications while you work on something else.",
      "workspace": "Local checkout of your code. Also called 'Working Copy' or just 'checkout'.",
      "index": "A staging area for file changes to commit. Before you “commit” (or checkin) files, you need to first add them to the index. This is also called \"current directory cache\", \"staging area\", \"cache\" or \"staged files\".",
      "local_repo": "A directory named `.git` that contains all of your necessary repository files — a Git repository skeleton. Typical branches: `main`, `master`, `feature-x`, `bugfix-y`. The local repository has exactly the same features and functionality as any other Git repository.",
      "remote_repo": "A repository of your code to share and collaborate with other developers. It's hosted on some the Internet or a remote, eg. Github. The default name is `origin`. Typical branches here: `main`, `master`, `shared-feature-x`, `release-y`. Also called 'remote repository', or just 'remote'."
    }
  }
}
